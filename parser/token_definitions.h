
#define END_CODE 1 // End of code
#define END_INSTRUCTION 2 // ;


#define OPEN_PARENTHESIS 3 // (
#define CLOSE_PARENTHESIS 4 // )


#define OPEN_BRACES 5 // {
#define CLOSE_BRACES 6 // }


#define OPEN_BRACKET 7 // [
#define CLOSE_BRACKET 8 // ]


#define COMMA 9 // ,
#define COLON 10 // :
#define DOUBLE_COLON 11 // ::
#define QUESTION_MARK 12 // ?
#define QUOTATION_MARK 13 // "
#define SINGLE_QUOTATION_MARK 14 // '
#define COMMENT_LINE 15 // //
#define COMMENT 16 // /*
#define COMMENT_END 17 // */
#define PRE_PROCESSOR 18 // #


#define POINTER 19 // * 
#define ADDRESS 20 // &


#define FUNCTION_OPERATOR_PLUS 21  // +
#define FUNCTION_OPERATOR_MINUS 22 // -
#define FUNCTION_OPERATOR_MULTIPLICATION 23 // *
#define FUNCTION_OPERATOR_DIVISION 24 // /
#define FUNCTION_OPERATOR_MODULOS 25 // %

#define FUNCTION_OPERATOR_EQUAL 71 // =
#define FUNCTION_OPERATOR_PLUS_ASSIGN 26 // +=
#define FUNCTION_OPERATOR_MINUS_ASSIGN 27 // -=
#define FUNCTION_OPERATOR_MULTIPLICATION_ASSIGN 28 // *=
#define FUNCTION_OPERATOR_DIVISION_ASSIGN 29 // /=
#define FUNCTION_OPERATOR_MODULOS_ASSIGN 30 // %=


#define FUNCTION_OPERATOR_INCREMENT 31 // ++
#define FUNCTION_OPERATOR_DECREMENT 32 // --


#define FUNCTION_OPERATOR_INCREMENT_LEFT 33 // ++
#define FUNCTION_OPERATOR_DECREMENT_LEFT 34 // --


#define FUNCTION_OPERATOR_AND 35 // &&
#define FUNCTION_OPERATOR_OR 36 // ||
#define FUNCTION_OPERATOR_NOT 37 // !


#define FUNCTION_OPERATOR_EQUAL_TO 38 // ==
#define FUNCTION_OPERATOR_NOT_EQUAL_TO 39 // !=
#define FUNCTION_OPERATOR_GREATER_THAN 40 // >
#define FUNCTION_OPERATOR_LESS_THAN 41 // <
#define FUNCTION_OPERATOR_GREATER_THAN_EQUAL_TO 42 // >=
#define FUNCTION_OPERATOR_LESS_THAN_EQUAL_TO 43 // <= 


#define FUNCTION_OPERATOR_BITWISE_AND 44 // &
#define FUNCTION_OPERATOR_BITWISE_OR 45 // |
#define FUNCTION_OPERATOR_BITWISE_XOR 46 // ^
#define FUNCTION_OPERATOR_BITWISE_LEFT_SIHFT 47 // <<
#define FUNCTION_OPERATOR_BITWISE_RIGHT_SHIFT 48 // >>


#define FUNCTION_OPERATOR_BITWISE_AND_ASSIGN 49 // &=
#define FUNCTION_OPERATOR_BITWISE_OR_ASSIGN 50 // |=
#define FUNCTION_OPERATOR_BITWISE_XOR_ASSIGN 51 // ^=
#define FUNCTION_OPERATOR_BITWISE_LEFT_SIHFT_ASSIGN 52 // <<=
#define FUNCTION_OPERATOR_BITWISE_RIGHT_SHIFT_ASSIGN 53 // >>=


#define BINARY_ADDITION 54 // b+
#define BINARY_SUBTRACTION 55 // b-
#define BINARY_MULTIPLICATION 56 // b*
#define BINARY_DIVISION 57 // b/
#define BINARY_MODULOS 58 // b%


#define PRIMITIVE_TYPE_VOID 59 // void
#define PRIMITIVE_TYPE_BYTE 60 // byte
#define PRIMITIVE_TYPE_INT 61 // int
#define PRIMITIVE_TYPE_BOOL 62 // bool

#define IDENTIFIER 63 //

#define IMPLICIT_VALUE_INT 64
#define IMPLICIT_VALUE_CHARACTER 65
#define IMPLICIT_VALUE_STRING 66

#define NAMESPACE 67 // namepsace
#define STRUCT 68 // struct
#define CONTRACT 69 // contract
#define STATIC 72 // static 

#define ACCESSING 73 // .
#define ACCESSING_POINTER 74 // ->

#define BYTE_CODE 75 // byte code

#define RETURN 76 // return