if (__node_variable_declaration->array_length) {

        _temp = getByteCodeOfNodeExpression(
            (Ast_Node_Expression*) __node_variable_declaration->array_length
        );

        _byte_code_rtr->join(
            _temp
        );
        delete _temp;

        byte_code::Byte_Code* _stack_off = (byte_code::Byte_Code*) malloc(sizeof(byte_code::Byte_Code));
        new (_stack_off) byte_code::Byte_Code(
            BYTE_CODE_STACK_OFF,
            0
        );
        _byte_code_rtr->add(_stack_off);

    }



    byte_code::Byte_Code* _variable = (byte_code::Byte_Code*) malloc(sizeof(byte_code::Byte_Code));
    new (_variable) byte_code::Byte_Code(
        BYTE_CODE_STACK_MEMORY_ALLOCATE,
        __node_variable_declaration->type->getSize()
    );
    _byte_code_rtr->add(_variable);


    __node_variable_declaration->address = 
        convertor_control->block_in_set->current_allocation_size;

    convertor_control->block_in_set->current_allocation_size += _variable->argument;

    if (__node_variable_declaration->array_length) {
    
        
    
    }






_temp = getByteCodeOfNodeExpression(
            (Ast_Node_Expression*) __node_variable_declaration->array_length
        );

        _byte_code_rtr->join(
            _temp
        );
        delete _temp;

        
        byte_code::Byte_Code* _stack_off = (byte_code::Byte_Code*) malloc(sizeof(byte_code::Byte_Code));
        new (_stack_off) byte_code::Byte_Code(
            BYTE_CODE_STACK_OFF,
            0
        );
        _byte_code_rtr->add(_stack_off);
